# GitHub Actions CI/CD Pipeline
# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: 检查提交日志格式
  check-commit-logs:
    runs-on: ubuntu-latest
    name: Check Commit Messages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的Git历史
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Check commit messages format
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # 对于PR，检查从base分支到head的所有提交
          python ci/check_mr_logs.py \
            --start-rev ${{ github.event.pull_request.base.sha }} \
            --end-rev ${{ github.event.pull_request.head.sha }}
        else
          # 对于push事件，检查最近的提交
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            python ci/check_mr_logs.py \
              --start-rev ${{ github.event.before }} \
              --end-rev ${{ github.event.after }}
          else
            echo "Initial commit, skipping commit message check"
          fi
        fi

  # Job 2: 代码格式化检查
  code-format-check:
    runs-on: ubuntu-latest
    name: Code Format Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install formatting tools
      run: |
        pip install ruff
        # 安装clang-format用于C/C++代码
        sudo apt-get update
        sudo apt-get install -y clang-format
    
    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # 获取PR中变更的文件
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
        else
          # 获取push中变更的文件
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            git diff --name-only ${{ github.event.before }}..${{ github.event.after }} > changed_files.txt
          else
            # 初始提交，获取所有文件
            git ls-files > changed_files.txt
          fi
        fi
        
        # 将文件列表转换为逗号分隔的字符串
        if [ -s changed_files.txt ]; then
          CHANGED_FILES=$(cat changed_files.txt | tr '\n' ',' | sed 's/,$//')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "has_files=true" >> $GITHUB_OUTPUT
        else
          echo "has_files=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Changed files:"
        cat changed_files.txt
    
    - name: Run code format check
      if: steps.changed-files.outputs.has_files == 'true'
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          python ci/code_format_helper.py \
            --start-rev ${{ github.event.pull_request.base.sha }} \
            --end-rev ${{ github.event.pull_request.head.sha }} \
            --changed-files "${{ steps.changed-files.outputs.files }}" \
            --py-style-config ci/ruff.toml
        else
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            python ci/code_format_helper.py \
              --start-rev ${{ github.event.before }} \
              --end-rev ${{ github.event.after }} \
              --changed-files "${{ steps.changed-files.outputs.files }}" \
              --py-style-config ci/ruff.toml
          else
            echo "Initial commit, skipping format check"
          fi
        fi

  # Job 3: 静态类型检查
  type-check:
    runs-on: ubuntu-latest
    name: Type Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install mypy and dependencies
      run: |
        pip install mypy
        # 如果有requirements.txt，也安装项目依赖
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        elif [ -f pyproject.toml ]; then
          pip install -e .
        fi
    
    - name: Get changed Python files
      id: py-files
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- "*.py" > py_files.txt
        else
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            git diff --name-only ${{ github.event.before }}..${{ github.event.after }} -- "*.py" > py_files.txt
          else
            find . -name "*.py" -not -path "./.git/*" > py_files.txt
          fi
        fi
        
        if [ -s py_files.txt ]; then
          PYTHON_FILES=$(cat py_files.txt | tr '\n' ',' | sed 's/,$//')
          echo "files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "has_files=true" >> $GITHUB_OUTPUT
        else
          echo "has_files=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Python files to check:"
        cat py_files.txt
    
    - name: Run type checking
      if: steps.py-files.outputs.has_files == 'true'
      run: |
        python ci/typing_helper.py --changed-files "${{ steps.py-files.outputs.files }}"

  # Job 4: 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pytest pytest-cov
        
        # 安装项目本身（可编辑模式）
        if [ -f pyproject.toml ]; then
          pip install -e .
          # 安装开发依赖
          if grep -q "dev.*=" pyproject.toml; then
            pip install -e ".[dev]" || pip install -e ".[test]" || true
          fi
        elif [ -f setup.py ]; then
          pip install -e .
        fi
        
        # 安装额外的依赖文件
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi
    
    - name: Run unit tests
      run: |
        # 确保当前目录在Python路径中
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/src"
        
        if [ -d "tests" ]; then
          echo "Running tests from tests/ directory"
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing -v
        elif [ -d "test" ]; then
          echo "Running tests from test/ directory"
          pytest test/ --cov=. --cov-report=xml --cov-report=term-missing -v
        else
          echo "No test directory found, creating sample test"
          mkdir -p tests
          echo "def test_example(): assert True" > tests/test_example.py
          pytest tests/ -v
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 5: 构建检查
  build-check:
    runs-on: ubuntu-latest
    name: Build Check
    needs: [check-commit-logs, code-format-check, type-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        pip install build twine
    
    - name: Build package
      run: |
        if [ -f pyproject.toml ] || [ -f setup.py ]; then
          python -m build
        else
          echo "No build configuration found, skipping build"
        fi
    
    - name: Check package
      run: |
        if [ -d dist ]; then
          twine check dist/*
        else
          echo "No dist directory, skipping package check"
        fi

  # Job 6: 构建和存档包 (仅在main分支push时执行)
  build-and-archive:
    runs-on: ubuntu-latest
    name: Build and Archive Package
    needs: [unit-tests, build-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于生成版本信息
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        pip install --upgrade pip
        pip install build twine
    
    - name: Generate build info
      id: build_info
      run: |
        # 获取commit信息
        COMMIT_SHA=$(git rev-parse --short HEAD)
        COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y%m%d-%H%M%S)
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        # 生成构建版本
        if [ -f pyproject.toml ]; then
          BASE_VERSION=$(python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); print(data['project']['version']); f.close()" 2>/dev/null || echo "0.1.0")
        else
          BASE_VERSION="0.1.0"
        fi
        
        BUILD_VERSION="${BASE_VERSION}.dev${COMMIT_DATE}+${COMMIT_SHA}"
        
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "commit_date=${COMMIT_DATE}" >> $GITHUB_OUTPUT
        echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        echo "build_version=${BUILD_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Build Info:"
        echo "  Base Version: ${BASE_VERSION}"
        echo "  Build Version: ${BUILD_VERSION}"
        echo "  Commit: ${COMMIT_SHA}"
        echo "  Date: ${COMMIT_DATE}"
        echo "  Branch: ${BRANCH_NAME}"
    
    - name: Build package
      run: |
        if [ -f pyproject.toml ] || [ -f setup.py ]; then
          echo "Building Python package..."
          python -m build
          
          echo "Package contents:"
          ls -la dist/
          
          echo "Package details:"
          if [ -d dist ]; then
            for file in dist/*; do
              echo "  File: $(basename $file)"
              echo "  Size: $(stat -f%z "$file" 2>/dev/null || stat -c%s "$file") bytes"
            done
          fi
        else
          echo "No build configuration found (pyproject.toml or setup.py)"
          exit 1
        fi
    
    - name: Validate package
      run: |
        if [ -d dist ]; then
          echo "Validating package with twine..."
          twine check dist/*
          
          echo "Package validation completed successfully!"
        else
          echo "No dist directory found"
          exit 1
        fi
    
    - name: Generate build summary
      run: |
        cat > build-summary.md << EOF
        # Build Summary
        
        **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Commit:** ${{ steps.build_info.outputs.commit_sha }}
        **Branch:** ${{ steps.build_info.outputs.branch_name }}
        **Base Version:** ${{ steps.build_info.outputs.base_version }}
        **Build Version:** ${{ steps.build_info.outputs.build_version }}
        
        ## Package Files
        $(ls -la dist/ | tail -n +2 | while read line; do echo "- $line"; done)
        
        ## Build Status
        - ✅ Package built successfully
        - ✅ Package validation passed
        - ✅ Ready for distribution
        
        ## Next Steps
        This package is ready for:
        - Manual testing
        - Internal distribution
        - PyPI publication (when ready)
        
        EOF
        
        echo "Generated build summary:"
        cat build-summary.md
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ steps.build_info.outputs.commit_sha }}
        path: |
          dist/
          build-summary.md
        retention-days: 30
    
    - name: Upload to GitHub Releases (for tagged builds)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          build-summary.md
        body_path: build-summary.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build completion notice
      run: |
        echo "🎉 Package build completed successfully!"
        echo ""
        echo "📦 Artifacts uploaded to GitHub Actions artifacts"
        echo "   - Retention: 30 days"
        echo "   - Download from: Actions -> This workflow run -> Artifacts"
        echo ""
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "🏷️  Tagged build detected - also uploaded to GitHub Releases"
        else
          echo "💡 To create a release, push a tag: git tag v1.0.0 && git push origin v1.0.0"
        fi